컴퓨터가 가지고 있는 cpu가 어떠한 방식으로 바이트 정렬을 하게 되는지 알아내는 과제.
바이트 정렬 방식을 고려하지 않고 데이터를 전송하게 되면 정렬 방식이 다른 cpu끼리 문제가 생길 수 있다.
호스트가 사용한 IP주소의 바이트 정렬 방식과 라우터가 사용하는 바이트 정렬 방식이 다르게 된다면 라우터에서 IP주소를 제대로 받지 못하는 경우가 생길 수 있다.
따라서 호스트와 라우터 사이의 바이트 정렬방식을 고려해서 입력을 진행하야 한다.
IP주소 뿐만 아니라 호스트와 호스트 사이 포트번호에서도 문제가 발생 할 수 있다.
따라서 바이트 정렬 방식은 IP 주소, 포트 번호는 무조건 빅 엔디언 응용 프로그램이 주고받는 데이터는 빅 또는 리틀 엔디언으로 둘중 하나로 통일한다.
-- 여기까지 과제에 해당하는 강의 설명 --

-- 여기부턴 과제 풀이 설명 --
호스트와 라우터, 호스트와 호스트 간의 바이트 정렬방식을 고려하지 않으면 IP주소, 포트번호를 제대로 받지 못하는 경우가 생길 수 있다.
정수 1을 4바이트를 가진 int 변수에 저장한다. 메모리에는 cpu의 엔디언 규칙에 따라서 저장됨.
저장한 정수 value의 주소를 (unsigned char*)&value를 사용해 1바이트 단위로 캐스팅.
Little Endian이면 value의 최하위 바이트가 낮은 주소에 저장 (*byte_ptr == 1), Big Endian이면 최상위 바이트가 낮은 주소에 저장(*byte_ptr == 0).
추가로 endian.h 라이브러리에 엔디안 확인을 위한 매크로가 정의되어 있다.
(__BYTE_ORDER == __LITTLE_ENDIAN), (__BYTE_ORDER == __BIG_ENDIAN) 이 매크로를 통해 Little Endian인지 Big Endian인지 확인 할 수 있다.
